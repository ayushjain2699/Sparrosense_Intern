cur = 524*60
no = 60
avg = 400
price = 452
no = 100
new_avg = (price*no+cur)/(60+no)
no = 200
new_avg = (price*no+cur)/(60+no)
433
32
422*32
433/4
32*4
(128*125+(433.5*32))/(32+128)
avg = 135
cur = 433.5*32
price = 125
av = (cur+no*price)/(no+32)
200*price
17.12/8
17.12*500
17.12*500*8
17.12*500*8/2.85
cur = 17.12*500
price = 2.85
no = 2000
av = (cur+no*price)/(no+500)
no = 25000
av = (cur+no*price)/(no+500)
download.file("https://lilianweng.github.io/lil-log/2019/11/10/self-supervised-learning.html")
download.file("https://lilianweng.github.io/lil-log/2019/11/10/self-supervised-learning.html",destfile = "./lilianweng.html")
dir()
download.file("https://lilianweng.github.io/lil-log/2019/11/10/self-supervised-learning.html",destfile = "./lilianweng.pdf")
library(ggplot2)
x = 200:4000:200
x = 200:4000
x = seq(200,4000,200)
x
y = c(62.5,69,67.5,74.2,74.5,80.5,80.7,81.5,82.2,79.8,81.3,83.7,85.8,83,78.8,81.3,82.5,81.8,83.3,82.7)
data = data.frame(x = x,y = y)
data
g = ggplot(data,aes(x,y))
g+geom_line()
g+geom_line()
library(ggplot2)
g+geom_line()
g+geom_line() + ggtitle("Only FC Layers")
plot(x,y)
plot(x,y,ltype = 'l')
plot(x,y,type = l)
plot(x,y,type = "l")
plot(x,y,type = "l",main = "Only fc Layers")
par(mfrow = c(1,3))
plot(x,y,type = "l",main = "Only fc Layers")
title(x = "iterations", y = "accuracy")
x2 = c(200,400,600,800,1000)
y2 = c(73.2,89.7,92.8,97.3,95.8)
plot(x2,y2,main = "fine tuning")
plot(x2,y2,main = "fine tuning")
plot(x,y,type = "l",main = "Only fc Layers")
title(x = "iterations", y = "accuracy")
plot(x2,y2,main = "fine tuning",type = "l")
title(x = "iterations", y = "accuracy")
plot(x2,y2,main = "fine tuning",type = "l")+lines(x,y)
plot(x,y,type = "l",main = "Only fc Layers")
title(x = "iterations", y = "accuracy")
plot(x2,y2,main = "fine tuning",type = "l")
title(x = "iterations", y = "accuracy")
title(title = "initilized weights from pretext then fine tuning")
plot(x2,y2,main = "fine tuning",type = "l")
plot(x,y,type = "l",main = "Only fc Layers",ylim = c(0,100))
plot(x,y,type = "l",main = "Only fc Layers",ylim = c(0,100))
plot(x,y,type = "l",main = "Only fc Layers",ylim = c(0,100))
plot(x,y,type = "l",main = "Only fc Layers",ylim = c(55,100))
plot(x,y,type = "l",main = "Only fc Layers",ylim = c(55,100))
plot(x,y,type = "l",main = "Only fc Layers",ylim = c(55,100))
par(mfrow = c(1,1))
plot(x,y,type = "l",main = "Only fc Layers",ylim = c(55,100))
lines(x2,y2)
lines(x2,y2,col = 'r')
lines(x2,y2,col = 'red')
y3 = c(68.8,87.8,95.7,95,98)
lines(x2,y3,col = 'blue')
title("accuracy")
plot(x,y,type = "l",main = "Accuracy",ylim = c(55,100))
lines(x2,y2,col = 'red')
lines(x2,y3,col = 'blue')
legend("topright",col = c("black","red","blue"),legend = c("Only fc layers","Training model with pre_initialized weights for C3D","Training full model from scratch"))
legend("topright",col = c("black","red","blue"),legend = c("Only fc layers","Training model with pre_initialized weights for C3D","Training full model from scratch"),pch = 2)
legend("topright",col = c("black","red","blue"),legend = c("Only fc layers","Training model with pre_initialized weights for C3D","Training full model from scratch"),pch = 3)
legend("topright",col = c("black","red","blue"),legend = c("Only fc layers","Training model with pre_initialized weights for C3D","Training full model from scratch"),pch = 4)
legend("topright",col = c("black","red","blue"),legend = c("Only fc layers","Training model with pre_initialized weights for C3D","Training full model from scratch"),pch = 25)
legend("topright",col = c("black","red","blue"),legend = c("Only fc layers","Training model with pre_initialized weights for C3D","Training full model from scratch"),pch = 15)
x2 = seq(1,5)
x2 = x2*100
y2 = c(50,56,58,64,69)
library(ggplot2)
d = data.frame(x = x,y = y)
g = ggplot(d,aes(x = x,y = y))
g+geom_line()
g+geom_line(col = 'red')
g+geom_line(col = 'red')+geom_line(aes(x = x2,y = y2),col = 'blue')
x = seq(200,2200,200)
x
x = seq(200,2200,200)
y_full = c(50.67,50.26,51.4,57.26,52.2,62.2,61,59,58.8)
y_full = c(50.67,50.26,51.4,57.26,52.2,62.2,61,59,62.3,59.86,58.8)
plot(x = x,y = y_full,type = 'l')
plot(x = x,y = y_full,type = 'l',col = "red")
plot(x = x,y = y_full,type = 'l',col = "red",ylim = c(50,90))
plot(x = x,y = y_full,type = 'l',col = "red",ylim = c(50,80))
plot(x = x,y = y_full,type = 'l',col = "red",ylim = c(50,80))
y_fine = c(69.5,62.9,69.33,71.0,69.6,72,71.2,71.2,72.1,71)
y_fine = c(69.5,62.9,69.33,71.0,69.6,69.6,72,71.2,71.2,72.1,71)
lines(x = x,y = y_fine, col = "blue")
legend("topright",col = c("red","blue"),legend = c("scratch","SL"),pch = 18)
title(x = "iterations",y = "Accuracy")
plot(x = x,y = y_full,type = 'l',col = "red",xlab = "iterations",ylab = "accuray")
plot(x = x,y = y_full,type = 'l',col = "red",xlab = "iterations",ylab = "accuray",ylim = c(50,80))
lines(x = x,y = y_fine, col = "blue")
legend("topright",col = c("red","blue"),legend = c("scratch","SL"),pch = 18)
title(main = "Test Accuracy")
x = sequence(200,12,200)
x = sequence(12,200,200)
x
y = c(62.4,61.4,76.4,76.8,77.7,87.9,87.6,89.1,93.3,84.9,84.4)
plot(x,y)
y = c(62.4,61.4,76.4,76.8,77.7,87.9,87.6,89.1,89.5,93.3,84.9,84.4)
plot(x,y)
plot(x,y,type = 'l')
plot(x,y,type = 'l',color = "red")
plot(x,y,type = 'l',col = "red")
title("SL Test Accuracy")
ylab("fwf")
plot(x,y,type = 'l',col = "red",xlab = "Iterations",ylab = "Accuracy(%)")
title("SL Test Accuracy")
setwd("D:/Docs/Sparrosense_Intern/Cleaning")
load(".RData")
736-214
ag_test = ag_shuffle[215:736]
ag_test = ag_shuffle[215:736,]
cp_test = cp_shuffle[215:736,]
fp-test = fp_shuffle[215:736,]
fp_test = fp_shuffle[215:736,]
sc_test = sc
vc_test = vc_shuffle[215:736,]
522*4+214
data_test = rbind(ag_test,cp_test,fp_test,sc_test,vc_test)
str(data_test)
l = is.na(data_test$V5)
table(l)
data_test$V5 = as.character(data_test$V5)
data_test[l,5] = "-"
l = is.na(data_test$V5)
table(l)
data_test$V4 = as.character(data_test$V4)
data_test$V3 = as.factor(data_test$V3)
str(data_test)
data_test$V3 = as.integer(data_test$V3)
data_test$V3 = as.character(data_test$V3)
str(data_test)
list[1]
list[1,1]
str(data_test)
data_test$V1 = gsub("/media/neo/krypton/data/data_crescent/camera_videos/original_videos","/home/neo/data/Ayush/rgb_orig_videos",data_test$V1)
str(data_test)
data_test$V2 = gsub("/media/neo/krypton/data/data_crescent/camera_videos/original_videos","/home/neo/data/Ayush/rgb_orig_videos",data_test$V2)
data_test$V1 = gsub(".mp4","",data_test$V1)
data_test$V2 = gsub(".mp4","",data_test$V2)
str(data_test)
data_test[2,1:2]
clear
str(data_test)
final = paste(data_test$V1,data_test$V2,data_test$V3,data_test$V4,data_test$V5,sep = " ")
write(final,"test_SL_new.list")
u1 = data_test$V1
u2 = data_test$V2
u = c(u1,u2)
u = unique(u)
write(u,"unique_test_new.list")
ag_shuffle[1,1]
u = gsub("/media/neo/krypton/data/data_crescent/camera_videos/original_videos","/home/neo/data/Ayush/rgb_orig_videos",u)
head(u)
u = gsub("/home/neo/data/Ayush/rgb_orig_videos","/media/neo/krypton/data/data_crescent/camera_videos/original_videos",u)
head(u)
u = paste(u,".mp4",sep = "")
head(u)
write(u,"unique_test_new.list")
l = grepl(".mp5",u)
table(l)
u[l]
u = gsub(".mp5","",u)
write(u,"unique_test_new.list")
